variables:
  BRANCH_NAME: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
trigger: none

pool:
  vmImage: ubuntu-latest



resources:
  repositories:
    - repository: walletTests
      type: github
      name: pagopa/pagopa-wallet-tests
      ref: main
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: BuildAndUnitTest
    jobs:
      - job: make_buildEndUnitTest
        steps:
          - task: Cache@2
            inputs:
              key: 'gradle | "$(Agent.OS)" | **/build.gradle.kts' # Swap build.gradle.kts for build.gradle when using Groovy
              restoreKeys: |
                gradle | "$(Agent.OS)"
                gradle
              path: $(GRADLE_USER_HOME)
            displayName: Configure gradle caching

          - task: SonarCloudPrepare@2
            displayName: 'Prepare SonarCloud analysis configuration'
            inputs:
              SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
              organization: '$(SONARCLOUD_ORG)'
              scannerMode: Other
              extraProperties: |
                sonar.projectKey=$(SONARCLOUD_PROJECT_KEY)
                sonar.projectName=$(SONARCLOUD_PROJECT_NAME)
                sonar.coverage.exclusions=**/config/*,**/*Mock*,**/model/*
                sonar.coverage.jacoco.xmlReportPaths=./build/reports/jacoco/test/jacocoTestReport.xml
                sonar.junit.reportPaths=./build/test-results/test

          - task: Gradle@3
            inputs:
              gradleWrapperFile: 'gradlew' # string. Alias: wrapperScript. Required. Gradle wrapper. Default: gradlew.
              tasks: 'build' # string. Required. Tasks. Default: build.
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml' # string. Required when publishJUnitResults = true. Test results files. Default: **/TEST-*.xml.
              codeCoverageToolOption: 'None' # 'None' | 'Cobertura' | 'JaCoCo'. Alias: codeCoverageTool. Code coverage tool. Default: None.
              codeCoverageClassFilesDirectories: 'build/classes/main/' # string. Alias: classFilesDirectories. Required when codeCoverageTool != None. Class files directories. Default: build/classes/main/.
              javaHomeOption: 'JDKVersion' # 'JDKVersion' | 'Path'. Alias: javaHomeSelection. Required. Set JAVA_HOME by. Default: JDKVersion.
              jdkVersionOption: '1.21' # 'default' | '1.11' | '1.10' | '1.9' | '1.8' | '1.7' | '1.6'. Alias: jdkVersion. Optional. Use when javaHomeSelection = JDKVersion. JDK version. Default: default.
              sonarQubeRunAnalysis: true

          - task: SonarCloudPublish@2
            displayName: 'Publish SonarCloud results on build summary'
            inputs:
              pollingTimeoutSec: '300'
          - script: |
              # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
              ./gradlew --stop
            displayName: Gradlew stop

          - task: PublishCodeCoverageResults@2
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'build/reports/jacoco/test/jacocoTestReport.xml'
              reportDirectory: 'build/reports/jacoco/test/html'
            displayName: 'Publish Code Coverage on Azure Devops'

  - stage: IntegrationTest
    dependsOn: [ ]
    jobs:
      - job: Integration_Test
        steps:
          - script: docker compose up -d
            displayName: 'Run app with docker-compose'
          - script: |
              timeout 180 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8300/actuator/health/liveness)" != "200" ]]; do sleep 5; done' || exit 1
            displayName: 'Health check pagopa-payment-wallet-cdc-service'
          - script: |
              eventFromQueue=$(az storage message peek \
                --connection-string "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;QueueEndpoint=http://localhost:10001/devstoreaccount1" \
                --queue-name pagopa-wallet-cdc-queue \
                --output tsv --query '[0].content')
              
              expectedDataEvent=$(cat docker-local/wallet-events-producer-testing/data.json)

              eventDataFromQueue=$(echo $eventFromQueue | jq -r '.data')
              
              echo "EventDataFromQueue: $eventDataFromQueue"
              echo "ExpectedEventData: $expectedDataEvent"

              normalized_event_expected=$(echo "$eventDataFromQueue" | jq -S .)
              normalized_event_from_queue=$(echo "$expectedDataEvent" | jq -S .[0])
              
              if [ "$normalized_event_expected" == "$normalized_event_from_queue" ]; then
                echo "test passed successfully"
              else
                echo "fail! unexpected event"
                exit 1   
              fi


  # --- START of Validate event in Hub (UAT) --- #
  - stage: "UAT_Testing_Generate_Wallet_Event"
    displayName: "UAT Testing Generate Wallet Event"
    dependsOn: [ Deploy_UAT_Green]
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: ValidateCDCFlow
        displayName: 'Run API Tests DataLake Flow (UAT)'
        steps:
          - checkout: walletTests
          - script: |
              yarn global add newman
            displayName: 'newman installation'
          - script: |
              newman run --ignore-redirects api-tests/api-tests/uat.cdc.update.application.tests.json --environment=api-tests/api-tests/uat.cdc.update.application.envs.json --env-var WALLET_TOKEN_TEST=$(WALLET_TOKEN_TEST) --reporters cli,junit,json > output.txt
            displayName: 'Run API tests to generate events on Queue for CDC (UAT)'
          - script: |
              # Extract WALLET_ID from report JSON
              WALLET_ID=$(grep -oP "WALLET_ID=\K[^\']+" output.txt)
              
              if [ -z "$WALLET_ID" ]; then
                echo "Cannot extract WALLET_ID from report"
                exit 1
              fi
              echo "WALLET_ID=$WALLET_ID"
              echo "##vso[task.setvariable variable=WALLET_ID]$WALLET_ID"
            displayName: 'Extract and export WALLET_ID from JSON report'
          - script: |
              wget https://archive.apache.org/dist/kafka/2.8.0/kafka_2.13-2.8.0.tgz
              tar -xzf kafka_2.13-2.8.0.tgz
              export PATH=$PATH:$PWD/kafka_2.13-2.8.0/bin
              # Verify Kafka installation
              kafka-topics.sh --version
              sleep 4
              # Run the Kafka consumer command
              eventsFromKafka=$(kafka-console-consumer.sh \
                --bootstrap-server pagopa-u-itn-observ-evh.servicebus.windows.net:9093 \
                --topic payment-wallet-ingestion-dl \
                --from-beginning \
                --timeout-ms 25000 \
                --consumer-property sasl.mechanism=PLAIN \
                --consumer-property security.protocol=SASL_SSL \
                --consumer-property "sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"\$ConnectionString\" password=\"$(AZURE_EVENTHUB_CONNECTION_STRING)\";")
              
              # Filter events by walletId
              filteredEvents=$(echo "$eventsFromKafka" | jq -c 'select(.walletId == "'$WALLET_ID'")')
              
              # Print the latest event from the filtered events
              latestEvent=$(echo "$filteredEvents" | tail -n 1)
   
              # Extract the id from the JSON string
              eventId=$(echo $latestEvent | jq -r '.walletId')
              expectedDataEventId=$WALLET_ID

              echo "Extracted event ID: $eventId"
              echo "Expected event ID: $expectedDataEventId"

              if [ "$eventId" == "$expectedDataEventId" ]; then
                echo "test passed successfully"
              else
                echo "fail! unexpected event"
                exit 1   
              fi

               # Extract the timestamp from the JSON string
              timestamp=$(echo $latestEvent | jq -r '.timestamp')
              
              echo "Event timestamp: $timestamp"
              
              # Truncate the fractional part of the timestamp if it exists
              timestamp=$(echo $timestamp | cut -d'.' -f1)
              
              # Get the current time and calculate the time difference
              currentTime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              timeDifference=$(($(date -d "$currentTime" +%s) - $(date -d "$timestamp" +%s)))
              
              # Check if the timestamp is less than 86400 seconds (1 day) ago
              if [ $timeDifference -lt 86400 ]; then
                echo "The timestamp is within the last 24 hours."
              else
                echo "The timestamp is older than 24 hours."
                exit 1
              fi
            displayName: 'Validate message in Kafka topic'
  # --- END Validate event in Hub (UAT) --- #
            displayName: 'Get cdc event from Azurite queue and validate'
